// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/dalet-oss/iris-api/client/dns"
	"github.com/dalet-oss/iris-api/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDNSUpdateDNSZoneRecordCmd returns a cmd to handle operation updateDnsZoneRecord
func makeOperationDNSUpdateDNSZoneRecordCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "UpdateDNSZoneRecord",
		Short: `Updates a DNS zone record.`,
		RunE:  runOperationDNSUpdateDNSZoneRecord,
	}

	if err := registerOperationDNSUpdateDNSZoneRecordParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDNSUpdateDNSZoneRecord uses cmd flags to call endpoint api
func runOperationDNSUpdateDNSZoneRecord(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := dns.NewUpdateDNSZoneRecordParams()
	if err, _ := retrieveOperationDNSUpdateDNSZoneRecordBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDNSUpdateDNSZoneRecordRecordIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDNSUpdateDNSZoneRecordZoneIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDNSUpdateDNSZoneRecordResult(appCli.DNS.UpdateDNSZoneRecord(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDNSUpdateDNSZoneRecordParamFlags registers all flags needed to fill params
func registerOperationDNSUpdateDNSZoneRecordParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDNSUpdateDNSZoneRecordBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDNSUpdateDNSZoneRecordRecordIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDNSUpdateDNSZoneRecordZoneIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDNSUpdateDNSZoneRecordBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelRecordFlags(0, "record", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationDNSUpdateDNSZoneRecordRecordIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	recordIdDescription := `Required. The ID of the DNS record to query.`

	var recordIdFlagName string
	if cmdPrefix == "" {
		recordIdFlagName = "recordId"
	} else {
		recordIdFlagName = fmt.Sprintf("%v.recordId", cmdPrefix)
	}

	var recordIdFlagDefault string

	_ = cmd.PersistentFlags().String(recordIdFlagName, recordIdFlagDefault, recordIdDescription)

	return nil
}
func registerOperationDNSUpdateDNSZoneRecordZoneIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	zoneIdDescription := `Required. The ID of the zone's record to update.`

	var zoneIdFlagName string
	if cmdPrefix == "" {
		zoneIdFlagName = "zoneId"
	} else {
		zoneIdFlagName = fmt.Sprintf("%v.zoneId", cmdPrefix)
	}

	var zoneIdFlagDefault string

	_ = cmd.PersistentFlags().String(zoneIdFlagName, zoneIdFlagDefault, zoneIdDescription)

	return nil
}

func retrieveOperationDNSUpdateDNSZoneRecordBodyFlag(m *dns.UpdateDNSZoneRecordParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.Record{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.Record: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.Record{}
	}
	err, added := retrieveModelRecordFlags(0, bodyValueModel, "record", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationDNSUpdateDNSZoneRecordRecordIDFlag(m *dns.UpdateDNSZoneRecordParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("recordId") {

		var recordIdFlagName string
		if cmdPrefix == "" {
			recordIdFlagName = "recordId"
		} else {
			recordIdFlagName = fmt.Sprintf("%v.recordId", cmdPrefix)
		}

		recordIdFlagValue, err := cmd.Flags().GetString(recordIdFlagName)
		if err != nil {
			return err, false
		}
		m.RecordID = recordIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDNSUpdateDNSZoneRecordZoneIDFlag(m *dns.UpdateDNSZoneRecordParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("zoneId") {

		var zoneIdFlagName string
		if cmdPrefix == "" {
			zoneIdFlagName = "zoneId"
		} else {
			zoneIdFlagName = fmt.Sprintf("%v.zoneId", cmdPrefix)
		}

		zoneIdFlagValue, err := cmd.Flags().GetString(zoneIdFlagName)
		if err != nil {
			return err, false
		}
		m.ZoneID = zoneIdFlagValue

	}
	return nil, retAdded
}

// parseOperationDNSUpdateDNSZoneRecordResult parses request result and return the string content
func parseOperationDNSUpdateDNSZoneRecordResult(resp0 *dns.UpdateDNSZoneRecordOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*dns.UpdateDNSZoneRecordOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning updateDnsZoneRecordBadRequest is not supported

		// Non schema case: warning updateDnsZoneRecordNotFound is not supported

		// Non schema case: warning updateDnsZoneRecordInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
