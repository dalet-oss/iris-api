// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/dalet-oss/iris-api/models"
	"github.com/spf13/cobra"
)

// Schema cli for Subnet

// register flags to command
func registerModelSubnetFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSubnetID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubnetPools(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubnetSubnet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubnetID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The subnet ID (auto-generated).`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerSubnetPools(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: pools []*SubnetPoolRange array type is not supported by go-swagger cli yet

	return nil
}

func registerSubnetSubnet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subnetDescription := `Required. The subnet in CIDR format (e.g. '192.168.0.0/24').`

	var subnetFlagName string
	if cmdPrefix == "" {
		subnetFlagName = "subnet"
	} else {
		subnetFlagName = fmt.Sprintf("%v.subnet", cmdPrefix)
	}

	var subnetFlagDefault string

	_ = cmd.PersistentFlags().String(subnetFlagName, subnetFlagDefault, subnetDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSubnetFlags(depth int, m *models.Subnet, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveSubnetIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, poolsAdded := retrieveSubnetPoolsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poolsAdded

	err, subnetAdded := retrieveSubnetSubnetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subnetAdded

	return nil, retAdded
}

func retrieveSubnetIDFlags(depth int, m *models.Subnet, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubnetPoolsFlags(depth int, m *models.Subnet, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poolsFlagName := fmt.Sprintf("%v.pools", cmdPrefix)
	if cmd.Flags().Changed(poolsFlagName) {
		// warning: pools array type []*SubnetPoolRange is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSubnetSubnetFlags(depth int, m *models.Subnet, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subnetFlagName := fmt.Sprintf("%v.subnet", cmdPrefix)
	if cmd.Flags().Changed(subnetFlagName) {

		var subnetFlagName string
		if cmdPrefix == "" {
			subnetFlagName = "subnet"
		} else {
			subnetFlagName = fmt.Sprintf("%v.subnet", cmdPrefix)
		}

		subnetFlagValue, err := cmd.Flags().GetString(subnetFlagName)
		if err != nil {
			return err, false
		}
		m.Subnet = &subnetFlagValue

		retAdded = true
	}

	return nil, retAdded
}
