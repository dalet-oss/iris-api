// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/dalet-oss/iris-api/client/dhcp"

	"github.com/spf13/cobra"
)

// makeOperationDhcpDeleteDHCPSubnetCmd returns a cmd to handle operation deleteDHCPSubnet
func makeOperationDhcpDeleteDHCPSubnetCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "DeleteDHCPSubnet",
		Short: `Deletes an existing subnet.`,
		RunE:  runOperationDhcpDeleteDHCPSubnet,
	}

	if err := registerOperationDhcpDeleteDHCPSubnetParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDhcpDeleteDHCPSubnet uses cmd flags to call endpoint api
func runOperationDhcpDeleteDHCPSubnet(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := dhcp.NewDeleteDHCPSubnetParams()
	if err, _ := retrieveOperationDhcpDeleteDHCPSubnetSubnetIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDhcpDeleteDHCPSubnetResult(appCli.Dhcp.DeleteDHCPSubnet(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDhcpDeleteDHCPSubnetParamFlags registers all flags needed to fill params
func registerOperationDhcpDeleteDHCPSubnetParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDhcpDeleteDHCPSubnetSubnetIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDhcpDeleteDHCPSubnetSubnetIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	subnetIdDescription := `Required. The ID of the subnet to delete.`

	var subnetIdFlagName string
	if cmdPrefix == "" {
		subnetIdFlagName = "subnetId"
	} else {
		subnetIdFlagName = fmt.Sprintf("%v.subnetId", cmdPrefix)
	}

	var subnetIdFlagDefault string

	_ = cmd.PersistentFlags().String(subnetIdFlagName, subnetIdFlagDefault, subnetIdDescription)

	return nil
}

func retrieveOperationDhcpDeleteDHCPSubnetSubnetIDFlag(m *dhcp.DeleteDHCPSubnetParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("subnetId") {

		var subnetIdFlagName string
		if cmdPrefix == "" {
			subnetIdFlagName = "subnetId"
		} else {
			subnetIdFlagName = fmt.Sprintf("%v.subnetId", cmdPrefix)
		}

		subnetIdFlagValue, err := cmd.Flags().GetString(subnetIdFlagName)
		if err != nil {
			return err, false
		}
		m.SubnetID = subnetIdFlagValue

	}
	return nil, retAdded
}

// parseOperationDhcpDeleteDHCPSubnetResult parses request result and return the string content
func parseOperationDhcpDeleteDHCPSubnetResult(resp0 *dhcp.DeleteDHCPSubnetOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteDHCPSubnetOK is not supported

		// Non schema case: warning deleteDHCPSubnetNotFound is not supported

		// Non schema case: warning deleteDHCPSubnetConflict is not supported

		// Non schema case: warning deleteDHCPSubnetInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response deleteDHCPSubnetOK is not supported by go-swagger cli yet.

	return "", nil
}
