// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/dalet-oss/iris-api/client/dns"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDNSGetDNSServerCmd returns a cmd to handle operation getDnsServer
func makeOperationDNSGetDNSServerCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetDNSServer",
		Short: `Returns the requested DNSServer object.`,
		RunE:  runOperationDNSGetDNSServer,
	}

	if err := registerOperationDNSGetDNSServerParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDNSGetDNSServer uses cmd flags to call endpoint api
func runOperationDNSGetDNSServer(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := dns.NewGetDNSServerParams()
	if err, _ := retrieveOperationDNSGetDNSServerServerIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDNSGetDNSServerResult(appCli.DNS.GetDNSServer(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDNSGetDNSServerParamFlags registers all flags needed to fill params
func registerOperationDNSGetDNSServerParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDNSGetDNSServerServerIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDNSGetDNSServerServerIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	serverIdDescription := `Required. The ID of the DNS server to query.`

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "serverId"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.serverId", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

func retrieveOperationDNSGetDNSServerServerIDFlag(m *dns.GetDNSServerParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("serverId") {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "serverId"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.serverId", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

	}
	return nil, retAdded
}

// parseOperationDNSGetDNSServerResult parses request result and return the string content
func parseOperationDNSGetDNSServerResult(resp0 *dns.GetDNSServerOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*dns.GetDNSServerOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getDnsServerNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
