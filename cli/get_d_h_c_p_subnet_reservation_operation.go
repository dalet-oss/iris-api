// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/dalet-oss/iris-api/client/dhcp"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDhcpGetDHCPSubnetReservationCmd returns a cmd to handle operation getDHCPSubnetReservation
func makeOperationDhcpGetDHCPSubnetReservationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetDHCPSubnetReservation",
		Short: `Returns the subnet reservation object.`,
		RunE:  runOperationDhcpGetDHCPSubnetReservation,
	}

	if err := registerOperationDhcpGetDHCPSubnetReservationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDhcpGetDHCPSubnetReservation uses cmd flags to call endpoint api
func runOperationDhcpGetDHCPSubnetReservation(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := dhcp.NewGetDHCPSubnetReservationParams()
	if err, _ := retrieveOperationDhcpGetDHCPSubnetReservationMacIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationDhcpGetDHCPSubnetReservationSubnetIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDhcpGetDHCPSubnetReservationResult(appCli.Dhcp.GetDHCPSubnetReservation(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDhcpGetDHCPSubnetReservationParamFlags registers all flags needed to fill params
func registerOperationDhcpGetDHCPSubnetReservationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDhcpGetDHCPSubnetReservationMacIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationDhcpGetDHCPSubnetReservationSubnetIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDhcpGetDHCPSubnetReservationMacIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	macIdDescription := `Required. The hardware MAC address of the reservation to query.`

	var macIdFlagName string
	if cmdPrefix == "" {
		macIdFlagName = "macID"
	} else {
		macIdFlagName = fmt.Sprintf("%v.macID", cmdPrefix)
	}

	var macIdFlagDefault string

	_ = cmd.PersistentFlags().String(macIdFlagName, macIdFlagDefault, macIdDescription)

	return nil
}
func registerOperationDhcpGetDHCPSubnetReservationSubnetIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	subnetIdDescription := `Required. The ID of the DHCP subnet to query.`

	var subnetIdFlagName string
	if cmdPrefix == "" {
		subnetIdFlagName = "subnetId"
	} else {
		subnetIdFlagName = fmt.Sprintf("%v.subnetId", cmdPrefix)
	}

	var subnetIdFlagDefault string

	_ = cmd.PersistentFlags().String(subnetIdFlagName, subnetIdFlagDefault, subnetIdDescription)

	return nil
}

func retrieveOperationDhcpGetDHCPSubnetReservationMacIDFlag(m *dhcp.GetDHCPSubnetReservationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("macID") {

		var macIdFlagName string
		if cmdPrefix == "" {
			macIdFlagName = "macID"
		} else {
			macIdFlagName = fmt.Sprintf("%v.macID", cmdPrefix)
		}

		macIdFlagValue, err := cmd.Flags().GetString(macIdFlagName)
		if err != nil {
			return err, false
		}
		m.MacID = macIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationDhcpGetDHCPSubnetReservationSubnetIDFlag(m *dhcp.GetDHCPSubnetReservationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("subnetId") {

		var subnetIdFlagName string
		if cmdPrefix == "" {
			subnetIdFlagName = "subnetId"
		} else {
			subnetIdFlagName = fmt.Sprintf("%v.subnetId", cmdPrefix)
		}

		subnetIdFlagValue, err := cmd.Flags().GetString(subnetIdFlagName)
		if err != nil {
			return err, false
		}
		m.SubnetID = subnetIdFlagValue

	}
	return nil, retAdded
}

// parseOperationDhcpGetDHCPSubnetReservationResult parses request result and return the string content
func parseOperationDhcpGetDHCPSubnetReservationResult(resp0 *dhcp.GetDHCPSubnetReservationOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*dhcp.GetDHCPSubnetReservationOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getDHCPSubnetReservationNotFound is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
