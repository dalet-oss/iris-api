// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/dalet-oss/iris-api/models"
	"github.com/spf13/cobra"
)

// Schema cli for SubnetPoolRange

// register flags to command
func registerModelSubnetPoolRangeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSubnetPoolRangeFirst(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubnetPoolRangeLast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubnetPoolRangeFirst(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstDescription := `The subnet's first IP address for DHCP dynamic leases.`

	var firstFlagName string
	if cmdPrefix == "" {
		firstFlagName = "first"
	} else {
		firstFlagName = fmt.Sprintf("%v.first", cmdPrefix)
	}

	var firstFlagDefault string

	_ = cmd.PersistentFlags().String(firstFlagName, firstFlagDefault, firstDescription)

	return nil
}

func registerSubnetPoolRangeLast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastDescription := `The subnet's last IP address for DHCP dynamic leases.`

	var lastFlagName string
	if cmdPrefix == "" {
		lastFlagName = "last"
	} else {
		lastFlagName = fmt.Sprintf("%v.last", cmdPrefix)
	}

	var lastFlagDefault string

	_ = cmd.PersistentFlags().String(lastFlagName, lastFlagDefault, lastDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSubnetPoolRangeFlags(depth int, m *models.SubnetPoolRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, firstAdded := retrieveSubnetPoolRangeFirstFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstAdded

	err, lastAdded := retrieveSubnetPoolRangeLastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastAdded

	return nil, retAdded
}

func retrieveSubnetPoolRangeFirstFlags(depth int, m *models.SubnetPoolRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstFlagName := fmt.Sprintf("%v.first", cmdPrefix)
	if cmd.Flags().Changed(firstFlagName) {

		var firstFlagName string
		if cmdPrefix == "" {
			firstFlagName = "first"
		} else {
			firstFlagName = fmt.Sprintf("%v.first", cmdPrefix)
		}

		firstFlagValue, err := cmd.Flags().GetString(firstFlagName)
		if err != nil {
			return err, false
		}
		m.First = firstFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubnetPoolRangeLastFlags(depth int, m *models.SubnetPoolRange, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastFlagName := fmt.Sprintf("%v.last", cmdPrefix)
	if cmd.Flags().Changed(lastFlagName) {

		var lastFlagName string
		if cmdPrefix == "" {
			lastFlagName = "last"
		} else {
			lastFlagName = fmt.Sprintf("%v.last", cmdPrefix)
		}

		lastFlagValue, err := cmd.Flags().GetString(lastFlagName)
		if err != nil {
			return err, false
		}
		m.Last = lastFlagValue

		retAdded = true
	}

	return nil, retAdded
}
