// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/iris-api/models"
)

// UpdateDNSZoneRecordReader is a Reader for the UpdateDNSZoneRecord structure.
type UpdateDNSZoneRecordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDNSZoneRecordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDNSZoneRecordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDNSZoneRecordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDNSZoneRecordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDNSZoneRecordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDNSZoneRecordOK creates a UpdateDNSZoneRecordOK with default headers values
func NewUpdateDNSZoneRecordOK() *UpdateDNSZoneRecordOK {
	return &UpdateDNSZoneRecordOK{}
}

/*
UpdateDNSZoneRecordOK describes a response with status code 200, with default header values.

Returns the updated Record object.
*/
type UpdateDNSZoneRecordOK struct {
	Payload *models.Record
}

// IsSuccess returns true when this update Dns zone record o k response has a 2xx status code
func (o *UpdateDNSZoneRecordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Dns zone record o k response has a 3xx status code
func (o *UpdateDNSZoneRecordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns zone record o k response has a 4xx status code
func (o *UpdateDNSZoneRecordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Dns zone record o k response has a 5xx status code
func (o *UpdateDNSZoneRecordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns zone record o k response a status code equal to that given
func (o *UpdateDNSZoneRecordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update Dns zone record o k response
func (o *UpdateDNSZoneRecordOK) Code() int {
	return 200
}

func (o *UpdateDNSZoneRecordOK) Error() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordOK  %+v", 200, o.Payload)
}

func (o *UpdateDNSZoneRecordOK) String() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordOK  %+v", 200, o.Payload)
}

func (o *UpdateDNSZoneRecordOK) GetPayload() *models.Record {
	return o.Payload
}

func (o *UpdateDNSZoneRecordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Record)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSZoneRecordBadRequest creates a UpdateDNSZoneRecordBadRequest with default headers values
func NewUpdateDNSZoneRecordBadRequest() *UpdateDNSZoneRecordBadRequest {
	return &UpdateDNSZoneRecordBadRequest{}
}

/*
UpdateDNSZoneRecordBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateDNSZoneRecordBadRequest struct {
}

// IsSuccess returns true when this update Dns zone record bad request response has a 2xx status code
func (o *UpdateDNSZoneRecordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns zone record bad request response has a 3xx status code
func (o *UpdateDNSZoneRecordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns zone record bad request response has a 4xx status code
func (o *UpdateDNSZoneRecordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns zone record bad request response has a 5xx status code
func (o *UpdateDNSZoneRecordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns zone record bad request response a status code equal to that given
func (o *UpdateDNSZoneRecordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Dns zone record bad request response
func (o *UpdateDNSZoneRecordBadRequest) Code() int {
	return 400
}

func (o *UpdateDNSZoneRecordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordBadRequest ", 400)
}

func (o *UpdateDNSZoneRecordBadRequest) String() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordBadRequest ", 400)
}

func (o *UpdateDNSZoneRecordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSZoneRecordNotFound creates a UpdateDNSZoneRecordNotFound with default headers values
func NewUpdateDNSZoneRecordNotFound() *UpdateDNSZoneRecordNotFound {
	return &UpdateDNSZoneRecordNotFound{}
}

/*
UpdateDNSZoneRecordNotFound describes a response with status code 404, with default header values.

Invalid zone ID or record ID was provided.
*/
type UpdateDNSZoneRecordNotFound struct {
}

// IsSuccess returns true when this update Dns zone record not found response has a 2xx status code
func (o *UpdateDNSZoneRecordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns zone record not found response has a 3xx status code
func (o *UpdateDNSZoneRecordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns zone record not found response has a 4xx status code
func (o *UpdateDNSZoneRecordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns zone record not found response has a 5xx status code
func (o *UpdateDNSZoneRecordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns zone record not found response a status code equal to that given
func (o *UpdateDNSZoneRecordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Dns zone record not found response
func (o *UpdateDNSZoneRecordNotFound) Code() int {
	return 404
}

func (o *UpdateDNSZoneRecordNotFound) Error() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordNotFound ", 404)
}

func (o *UpdateDNSZoneRecordNotFound) String() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordNotFound ", 404)
}

func (o *UpdateDNSZoneRecordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSZoneRecordInternalServerError creates a UpdateDNSZoneRecordInternalServerError with default headers values
func NewUpdateDNSZoneRecordInternalServerError() *UpdateDNSZoneRecordInternalServerError {
	return &UpdateDNSZoneRecordInternalServerError{}
}

/*
UpdateDNSZoneRecordInternalServerError describes a response with status code 500, with default header values.

Unable to update zone's record.
*/
type UpdateDNSZoneRecordInternalServerError struct {
}

// IsSuccess returns true when this update Dns zone record internal server error response has a 2xx status code
func (o *UpdateDNSZoneRecordInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns zone record internal server error response has a 3xx status code
func (o *UpdateDNSZoneRecordInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns zone record internal server error response has a 4xx status code
func (o *UpdateDNSZoneRecordInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Dns zone record internal server error response has a 5xx status code
func (o *UpdateDNSZoneRecordInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update Dns zone record internal server error response a status code equal to that given
func (o *UpdateDNSZoneRecordInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update Dns zone record internal server error response
func (o *UpdateDNSZoneRecordInternalServerError) Code() int {
	return 500
}

func (o *UpdateDNSZoneRecordInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordInternalServerError ", 500)
}

func (o *UpdateDNSZoneRecordInternalServerError) String() string {
	return fmt.Sprintf("[PUT /dns/zone/{zoneId}/record/{recordId}][%d] updateDnsZoneRecordInternalServerError ", 500)
}

func (o *UpdateDNSZoneRecordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
