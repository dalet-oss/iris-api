// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDNSZone(params *CreateDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDNSZoneCreated, error)

	CreateDNSZoneRecord(params *CreateDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDNSZoneRecordCreated, error)

	DeleteDNSZone(params *DeleteDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDNSZoneOK, error)

	DeleteDNSZoneRecord(params *DeleteDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDNSZoneRecordOK, error)

	DisableDNSZoneRecord(params *DisableDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableDNSZoneRecordCreated, error)

	EnableDNSZoneRecord(params *EnableDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableDNSZoneRecordCreated, error)

	GetAllDNSServers(params *GetAllDNSServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSServersOK, error)

	GetAllDNSZoneRecords(params *GetAllDNSZoneRecordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSZoneRecordsOK, error)

	GetAllDNSZones(params *GetAllDNSZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSZonesOK, error)

	GetDNSServer(params *GetDNSServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSServerOK, error)

	GetDNSZone(params *GetDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSZoneOK, error)

	GetDNSZoneRecord(params *GetDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSZoneRecordOK, error)

	UpdateDNSZone(params *UpdateDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDNSZoneOK, error)

	UpdateDNSZoneRecord(params *UpdateDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDNSZoneRecordOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateDNSZone Creates a new DNS (sub-)zone.
*/
func (a *Client) CreateDNSZone(params *CreateDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDNSZoneCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDNSZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDNSZone",
		Method:             "POST",
		PathPattern:        "/dns/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDNSZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDNSZoneCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDNSZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDNSZoneRecord Creates a new DNS zone's record.
*/
func (a *Client) CreateDNSZoneRecord(params *CreateDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDNSZoneRecordCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDNSZoneRecord",
		Method:             "POST",
		PathPattern:        "/dns/zone/{zoneId}/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDNSZoneRecordCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDNSZone Deletes an existing zone.
*/
func (a *Client) DeleteDNSZone(params *DeleteDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDNSZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDNSZone",
		Method:             "DELETE",
		PathPattern:        "/dns/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDNSZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDNSZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDNSZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDNSZoneRecord Deletes an existing zone's record.
*/
func (a *Client) DeleteDNSZoneRecord(params *DeleteDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDNSZoneRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDNSZoneRecord",
		Method:             "DELETE",
		PathPattern:        "/dns/zone/{zoneId}/record/{recordId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDNSZoneRecordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DisableDNSZoneRecord Disable a given DNS Zone record.
*/
func (a *Client) DisableDNSZoneRecord(params *DisableDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableDNSZoneRecordCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DisableDNSZoneRecord",
		Method:             "POST",
		PathPattern:        "/dns/zone/{zoneId}/record/{recordId}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableDNSZoneRecordCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableDNSZoneRecord Enable a given DNS Zone record.
*/
func (a *Client) EnableDNSZoneRecord(params *EnableDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableDNSZoneRecordCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnableDNSZoneRecord",
		Method:             "POST",
		PathPattern:        "/dns/zone/{zoneId}/record/{recordId}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableDNSZoneRecordCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDNSServers Returns the IDs of DNS servers.
*/
func (a *Client) GetAllDNSServers(params *GetAllDNSServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDNSServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllDNSServers",
		Method:             "GET",
		PathPattern:        "/dns/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDNSServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDNSServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllDNSServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDNSZoneRecords Returns the list of zone's record IDs.
*/
func (a *Client) GetAllDNSZoneRecords(params *GetAllDNSZoneRecordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSZoneRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDNSZoneRecordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllDNSZoneRecords",
		Method:             "GET",
		PathPattern:        "/dns/zone/{zoneId}/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDNSZoneRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDNSZoneRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllDNSZoneRecords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDNSZones Returns the IDs of DNS zones.
*/
func (a *Client) GetAllDNSZones(params *GetAllDNSZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDNSZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDNSZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllDNSZones",
		Method:             "GET",
		PathPattern:        "/dns/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDNSZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDNSZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllDNSZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDNSServer Returns the requested DNSServer object.
*/
func (a *Client) GetDNSServer(params *GetDNSServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDNSServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDNSServer",
		Method:             "GET",
		PathPattern:        "/dns/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDNSServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDNSServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDNSServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDNSZone Returns the requested DNS Zone object.
*/
func (a *Client) GetDNSZone(params *GetDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDNSZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDNSZone",
		Method:             "GET",
		PathPattern:        "/dns/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDNSZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDNSZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDNSZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDNSZoneRecord Returns the zone record object.
*/
func (a *Client) GetDNSZoneRecord(params *GetDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDNSZoneRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDNSZoneRecord",
		Method:             "GET",
		PathPattern:        "/dns/zone/{zoneId}/record/{recordId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDNSZoneRecordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDNSZone Updates a DNS zone configuration.
*/
func (a *Client) UpdateDNSZone(params *UpdateDNSZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDNSZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDNSZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDNSZone",
		Method:             "PUT",
		PathPattern:        "/dns/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDNSZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDNSZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDNSZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDNSZoneRecord Updates a DNS zone record.
*/
func (a *Client) UpdateDNSZoneRecord(params *UpdateDNSZoneRecordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDNSZoneRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDNSZoneRecordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDNSZoneRecord",
		Method:             "PUT",
		PathPattern:        "/dns/zone/{zoneId}/record/{recordId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDNSZoneRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDNSZoneRecordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDNSZoneRecord: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
