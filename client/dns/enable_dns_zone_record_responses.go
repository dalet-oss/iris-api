// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// EnableDNSZoneRecordReader is a Reader for the EnableDNSZoneRecord structure.
type EnableDNSZoneRecordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableDNSZoneRecordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewEnableDNSZoneRecordCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewEnableDNSZoneRecordConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnableDNSZoneRecordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnableDNSZoneRecordCreated creates a EnableDNSZoneRecordCreated with default headers values
func NewEnableDNSZoneRecordCreated() *EnableDNSZoneRecordCreated {
	return &EnableDNSZoneRecordCreated{}
}

/*
EnableDNSZoneRecordCreated describes a response with status code 201, with default header values.

The DNS zone's record has been enabled.
*/
type EnableDNSZoneRecordCreated struct {
}

// IsSuccess returns true when this enable Dns zone record created response has a 2xx status code
func (o *EnableDNSZoneRecordCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable Dns zone record created response has a 3xx status code
func (o *EnableDNSZoneRecordCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable Dns zone record created response has a 4xx status code
func (o *EnableDNSZoneRecordCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable Dns zone record created response has a 5xx status code
func (o *EnableDNSZoneRecordCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this enable Dns zone record created response a status code equal to that given
func (o *EnableDNSZoneRecordCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the enable Dns zone record created response
func (o *EnableDNSZoneRecordCreated) Code() int {
	return 201
}

func (o *EnableDNSZoneRecordCreated) Error() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordCreated ", 201)
}

func (o *EnableDNSZoneRecordCreated) String() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordCreated ", 201)
}

func (o *EnableDNSZoneRecordCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableDNSZoneRecordConflict creates a EnableDNSZoneRecordConflict with default headers values
func NewEnableDNSZoneRecordConflict() *EnableDNSZoneRecordConflict {
	return &EnableDNSZoneRecordConflict{}
}

/*
EnableDNSZoneRecordConflict describes a response with status code 409, with default header values.

The DNS zone's record was already enable.
*/
type EnableDNSZoneRecordConflict struct {
}

// IsSuccess returns true when this enable Dns zone record conflict response has a 2xx status code
func (o *EnableDNSZoneRecordConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable Dns zone record conflict response has a 3xx status code
func (o *EnableDNSZoneRecordConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable Dns zone record conflict response has a 4xx status code
func (o *EnableDNSZoneRecordConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable Dns zone record conflict response has a 5xx status code
func (o *EnableDNSZoneRecordConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this enable Dns zone record conflict response a status code equal to that given
func (o *EnableDNSZoneRecordConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the enable Dns zone record conflict response
func (o *EnableDNSZoneRecordConflict) Code() int {
	return 409
}

func (o *EnableDNSZoneRecordConflict) Error() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordConflict ", 409)
}

func (o *EnableDNSZoneRecordConflict) String() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordConflict ", 409)
}

func (o *EnableDNSZoneRecordConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnableDNSZoneRecordInternalServerError creates a EnableDNSZoneRecordInternalServerError with default headers values
func NewEnableDNSZoneRecordInternalServerError() *EnableDNSZoneRecordInternalServerError {
	return &EnableDNSZoneRecordInternalServerError{}
}

/*
EnableDNSZoneRecordInternalServerError describes a response with status code 500, with default header values.

Unable to enable the DNS zone's record.
*/
type EnableDNSZoneRecordInternalServerError struct {
}

// IsSuccess returns true when this enable Dns zone record internal server error response has a 2xx status code
func (o *EnableDNSZoneRecordInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable Dns zone record internal server error response has a 3xx status code
func (o *EnableDNSZoneRecordInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable Dns zone record internal server error response has a 4xx status code
func (o *EnableDNSZoneRecordInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable Dns zone record internal server error response has a 5xx status code
func (o *EnableDNSZoneRecordInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enable Dns zone record internal server error response a status code equal to that given
func (o *EnableDNSZoneRecordInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enable Dns zone record internal server error response
func (o *EnableDNSZoneRecordInternalServerError) Code() int {
	return 500
}

func (o *EnableDNSZoneRecordInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordInternalServerError ", 500)
}

func (o *EnableDNSZoneRecordInternalServerError) String() string {
	return fmt.Sprintf("[POST /dns/zone/{zoneId}/record/{recordId}/enable][%d] enableDnsZoneRecordInternalServerError ", 500)
}

func (o *EnableDNSZoneRecordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
