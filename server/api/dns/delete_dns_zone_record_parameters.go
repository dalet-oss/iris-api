// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteDNSZoneRecordParams creates a new DeleteDNSZoneRecordParams object
//
// There are no default values defined in the spec.
func NewDeleteDNSZoneRecordParams() DeleteDNSZoneRecordParams {

	return DeleteDNSZoneRecordParams{}
}

// DeleteDNSZoneRecordParams contains all the bound params for the delete DNS zone record operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteDNSZoneRecord
type DeleteDNSZoneRecordParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The ID of the DNS record to delete.
	  Required: true
	  In: path
	*/
	RecordID string
	/*The DNS record types to be removed.
	  Required: true
	  In: query
	*/
	Type string
	/*The ID of the zone's record to delete.
	  Required: true
	  In: path
	*/
	ZoneID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteDNSZoneRecordParams() beforehand.
func (o *DeleteDNSZoneRecordParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rRecordID, rhkRecordID, _ := route.Params.GetOK("recordId")
	if err := o.bindRecordID(rRecordID, rhkRecordID, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	rZoneID, rhkZoneID, _ := route.Params.GetOK("zoneId")
	if err := o.bindZoneID(rZoneID, rhkZoneID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindRecordID binds and validates parameter RecordID from path.
func (o *DeleteDNSZoneRecordParams) bindRecordID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.RecordID = raw

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *DeleteDNSZoneRecordParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("type", "query", raw); err != nil {
		return err
	}
	o.Type = raw

	return nil
}

// bindZoneID binds and validates parameter ZoneID from path.
func (o *DeleteDNSZoneRecordParams) bindZoneID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ZoneID = raw

	return nil
}
