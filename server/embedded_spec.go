// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Iris API Server",
    "title": "Iris",
    "version": "0.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/dhcp": {
      "get": {
        "description": "Return the status of the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPStatus",
        "responses": {
          "200": {
            "description": "Return the status and version of the DHCPv4 service.",
            "schema": {
              "$ref": "#/definitions/DHCP"
            }
          }
        }
      }
    },
    "/dhcp/disable": {
      "post": {
        "description": "Disable the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DisableDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service has been disabled."
          },
          "409": {
            "description": "The DHCPv4 service was already disable."
          },
          "500": {
            "description": "Unable to disable the DHCPv4 service."
          }
        }
      }
    },
    "/dhcp/enable": {
      "post": {
        "description": "Enable the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "EnableDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service has been enabled."
          },
          "409": {
            "description": "The DHCPv4 service was already enable."
          },
          "500": {
            "description": "Unable to enable the DHCPv4 service."
          }
        }
      }
    },
    "/dhcp/reload": {
      "post": {
        "description": "Reload the DHCPv4 service configuration.",
        "tags": [
          "dhcp"
        ],
        "operationId": "ReloadDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service configuration has been reloaded."
          },
          "500": {
            "description": "Unable to reload the DHCPv4 service configuration."
          }
        }
      }
    },
    "/dhcp/subnet": {
      "get": {
        "description": "Returns the IDs of DHCPv4 registered subnets.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetAllDHCPSubnets",
        "responses": {
          "200": {
            "description": "Returns the an array of DHCPv4 registered subnets.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new DHCPv4 subnet.",
        "tags": [
          "dhcp"
        ],
        "operationId": "CreateDHCPSubnet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Subnet already exists."
          },
          "500": {
            "description": "Unable to create Subnet's resevration."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}": {
      "get": {
        "description": "Returns the requested DHCP Subnet object.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DHCP Subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DHCPv4 subnet configuration.",
        "tags": [
          "dhcp"
        ],
        "operationId": "UpdateDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "500": {
            "description": "Unable to update subnet."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DeleteDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The subnet has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "The subnet is not empty or still has reservations."
          },
          "500": {
            "description": "Unable to remove the requested subnet."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}/reservation": {
      "get": {
        "description": "Returns the list of MAC hardware addresses of subnet's reservations.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetAllDHCPSubnetReservations",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to get reservations from.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of subnet's reserved MAC addresses.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "post": {
        "description": "Creates a new DHCPv4 subnet's reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "CreateDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to create reservations on.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet's reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Subnet's reservation already exists."
          },
          "500": {
            "description": "Unable to create Subnet's resevration."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}/reservation/{macID}": {
      "get": {
        "description": "Returns the subnet reservation object.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to query.",
            "name": "macID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DHCP Reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DHCPv4 subnet reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "UpdateDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet's reservation to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to update.",
            "name": "macID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated Reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          },
          "500": {
            "description": "Unable to update subnet's reservation."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet's reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DeleteDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet's reservation to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to delete.",
            "name": "macID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The reservation has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          },
          "500": {
            "description": "Unable to remove the requested reservation."
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "Healthz",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DHCP": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the DHCPv4 service",
          "type": "string",
          "enum": [
            "OK",
            "KO"
          ]
        },
        "version": {
          "description": "The version of the DHCPv4 service",
          "type": "string"
        }
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "hostname": {
          "description": "The host name",
          "type": "string"
        },
        "ip": {
          "description": "The host IP address.",
          "type": "string"
        },
        "mac": {
          "description": "The host MAC address.",
          "type": "string"
        }
      },
      "example": {
        "hostname": "my-awesome-server",
        "ip": "192.168.0.10",
        "mac": "1a:1b:1c:1d:1e:1f"
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "subnet",
        "pools"
      ],
      "properties": {
        "id": {
          "description": "The subnet ID (auto-generated).",
          "type": "string"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubnetPoolRange"
          }
        },
        "subnet": {
          "description": "The subnet in CIDR format (e.g. '192.168.0.0/24').",
          "type": "string"
        }
      }
    },
    "SubnetPoolRange": {
      "type": "object",
      "properties": {
        "first": {
          "description": "The subnet's first IP address for DHCP dynamic leases.",
          "type": "string"
        },
        "last": {
          "description": "The subnet's last IP address for DHCP dynamic leases.",
          "type": "string"
        }
      },
      "example": {
        "first": "192.168.0.51",
        "last": "192.168.0.99"
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Iris API Server",
    "title": "Iris",
    "version": "0.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/dhcp": {
      "get": {
        "description": "Return the status of the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPStatus",
        "responses": {
          "200": {
            "description": "Return the status and version of the DHCPv4 service.",
            "schema": {
              "$ref": "#/definitions/DHCP"
            }
          }
        }
      }
    },
    "/dhcp/disable": {
      "post": {
        "description": "Disable the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DisableDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service has been disabled."
          },
          "409": {
            "description": "The DHCPv4 service was already disable."
          },
          "500": {
            "description": "Unable to disable the DHCPv4 service."
          }
        }
      }
    },
    "/dhcp/enable": {
      "post": {
        "description": "Enable the DHCPv4 service.",
        "tags": [
          "dhcp"
        ],
        "operationId": "EnableDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service has been enabled."
          },
          "409": {
            "description": "The DHCPv4 service was already enable."
          },
          "500": {
            "description": "Unable to enable the DHCPv4 service."
          }
        }
      }
    },
    "/dhcp/reload": {
      "post": {
        "description": "Reload the DHCPv4 service configuration.",
        "tags": [
          "dhcp"
        ],
        "operationId": "ReloadDHCP",
        "responses": {
          "201": {
            "description": "The DHCPv4 service configuration has been reloaded."
          },
          "500": {
            "description": "Unable to reload the DHCPv4 service configuration."
          }
        }
      }
    },
    "/dhcp/subnet": {
      "get": {
        "description": "Returns the IDs of DHCPv4 registered subnets.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetAllDHCPSubnets",
        "responses": {
          "200": {
            "description": "Returns the an array of DHCPv4 registered subnets.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new DHCPv4 subnet.",
        "tags": [
          "dhcp"
        ],
        "operationId": "CreateDHCPSubnet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Subnet already exists."
          },
          "500": {
            "description": "Unable to create Subnet's resevration."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}": {
      "get": {
        "description": "Returns the requested DHCP Subnet object.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DHCP Subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DHCPv4 subnet configuration.",
        "tags": [
          "dhcp"
        ],
        "operationId": "UpdateDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "500": {
            "description": "Unable to update subnet."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DeleteDHCPSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The subnet has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "The subnet is not empty or still has reservations."
          },
          "500": {
            "description": "Unable to remove the requested subnet."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}/reservation": {
      "get": {
        "description": "Returns the list of MAC hardware addresses of subnet's reservations.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetAllDHCPSubnetReservations",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to get reservations from.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of subnet's reserved MAC addresses.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "post": {
        "description": "Creates a new DHCPv4 subnet's reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "CreateDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to create reservations on.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet's reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Subnet's reservation already exists."
          },
          "500": {
            "description": "Unable to create Subnet's resevration."
          }
        }
      }
    },
    "/dhcp/subnet/{subnetId}/reservation/{macID}": {
      "get": {
        "description": "Returns the subnet reservation object.",
        "tags": [
          "dhcp"
        ],
        "operationId": "GetDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DHCP subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to query.",
            "name": "macID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DHCP Reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DHCPv4 subnet reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "UpdateDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet's reservation to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to update.",
            "name": "macID",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated Reservation object.",
            "schema": {
              "$ref": "#/definitions/Reservation"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          },
          "500": {
            "description": "Unable to update subnet's reservation."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet's reservation.",
        "tags": [
          "dhcp"
        ],
        "operationId": "DeleteDHCPSubnetReservation",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet's reservation to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The hardware MAC address of the reservation to delete.",
            "name": "macID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The reservation has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID or reservation MAC address was provided."
          },
          "500": {
            "description": "Unable to remove the requested reservation."
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "Healthz",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DHCP": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The status of the DHCPv4 service",
          "type": "string",
          "enum": [
            "OK",
            "KO"
          ]
        },
        "version": {
          "description": "The version of the DHCPv4 service",
          "type": "string"
        }
      }
    },
    "Reservation": {
      "type": "object",
      "properties": {
        "hostname": {
          "description": "The host name",
          "type": "string"
        },
        "ip": {
          "description": "The host IP address.",
          "type": "string"
        },
        "mac": {
          "description": "The host MAC address.",
          "type": "string"
        }
      },
      "example": {
        "hostname": "my-awesome-server",
        "ip": "192.168.0.10",
        "mac": "1a:1b:1c:1d:1e:1f"
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "subnet",
        "pools"
      ],
      "properties": {
        "id": {
          "description": "The subnet ID (auto-generated).",
          "type": "string"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubnetPoolRange"
          }
        },
        "subnet": {
          "description": "The subnet in CIDR format (e.g. '192.168.0.0/24').",
          "type": "string"
        }
      }
    },
    "SubnetPoolRange": {
      "type": "object",
      "properties": {
        "first": {
          "description": "The subnet's first IP address for DHCP dynamic leases.",
          "type": "string"
        },
        "last": {
          "description": "The subnet's last IP address for DHCP dynamic leases.",
          "type": "string"
        }
      },
      "example": {
        "first": "192.168.0.51",
        "last": "192.168.0.99"
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
